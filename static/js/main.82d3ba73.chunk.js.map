{"version":3,"sources":["components/style/Style.js","components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["sizes","desktop","tablet","media","Object","keys","reduce","acc","label","css","Template","styled","div","Insert","form","ListItem","TodoListItemVirtualized","TodoTemplate","children","changeHeight","className","TodoInsert","onInsert","inputEl","useRef","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","current","focus","placeholder","ref","type","React","memo","todo","onDelete","onToggle","style","id","text","checked","deleted","cn","onClick","todos","rowRenderer","index","key","autoWidth","width","height","rowCount","length","rowHeight","list","outline","App","setTodos","useEffect","getToDos","localStorage","setItem","JSON","stringify","loadedToDos","getItem","parseToDos","parse","window","performance","now","delete","concat","map","setTimeout","filter","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82d3ba73.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nconst sizes = {\r\n  desktop: 1024,\r\n  tablet: 630,\r\n};\r\n\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n  acc[label] = (...args) => css`\r\n    @media (max-width: ${sizes[label] / 16}em) {\r\n      ${css(...args)};\r\n    }\r\n  `;\r\n\r\n  return acc;\r\n}, {});\r\n\r\nexport const Template = styled.div`\r\n  /* width가 주어진 상태에서 좌우 정렬 */\r\n  width: 630px;\r\n  margin: 0 auto;\r\n  margin-top: 5rem;\r\n  ${media.tablet`width: 100%; margin-top: 0rem;`}\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n\r\n  .app-title {\r\n    background: #396c67;\r\n    color: white;\r\n    height: 4rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .contents {\r\n    background: white;\r\n  }\r\n`;\r\n\r\nexport const Insert = styled.form`\r\n  display: flex;\r\n  background: #495057;\r\n  input {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    padding: 0.5rem;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n    color: white;\r\n\r\n    &::placeholder {\r\n      color: #dee2e6;\r\n    }\r\n\r\n    flex: 1;\r\n  }\r\n\r\n  button {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    background: #868e96;\r\n    color: white;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    transition: 0.1s ease-in;\r\n\r\n    &:hover {\r\n      background: #adb5bd;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .checkBox {\r\n    cursor: pointer;\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n    svg {\r\n      /* 아이콘 */\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    .text {\r\n      margin-left: 0.5rem;\r\n      flex: 1;\r\n    }\r\n\r\n    /* 체크되었을 때 보여 줄 스타일 ( 조건부 스타일링 )*/\r\n    &.checked {\r\n      svg {\r\n        color: #22b8cf;\r\n      }\r\n\r\n      .text {\r\n        color: #adb5bd;\r\n        text-decoration: line-through;\r\n      }\r\n    }\r\n  }\r\n\r\n  .remove {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.5rem;\r\n    color: #ff6b6b;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      color: #ff8787;\r\n    }\r\n  }\r\n  transform: translateX(0);\r\n  transition: 0.5s ease-in;\r\n  &.deleted {\r\n    transform: translateX(650px);\r\n  }\r\n`;\r\n\r\nexport const TodoListItemVirtualized = styled.div`\r\n  & + & {\r\n    border-top: 1px solid #dee2e6;\r\n  }\r\n\r\n  &:nth-child(even) {\r\n    background: #f8f9fa;\r\n  }\r\n`;\r\n","// 화면을 가운데 정렬 및 앱 타일틀을 보여준다\r\n\r\nimport React from 'react';\r\nimport { Template } from './style/Style';\r\n\r\nconst TodoTemplate = ({ children, changeHeight }) => {\r\n  return (\r\n    <Template changeHeight={changeHeight}>\r\n      <div className=\"app-title\">Todo List</div>\r\n      <div className=\"contents\">{children}</div>\r\n    </Template>\r\n  );\r\n};\r\nexport default TodoTemplate;\r\n","// 새로운 항목을 입력하고 추가\r\nimport React, { useState, useCallback, useRef } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { Insert } from './style/Style';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const inputEl = useRef(null);\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback(e => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      onInsert(value);\r\n      setValue('');\r\n\r\n      e.preventDefault();\r\n      inputEl.current.focus();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <Insert onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요\"\r\n        value={value}\r\n        onChange={onChange}\r\n        ref={inputEl}\r\n      />\r\n\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </Insert>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","// 각 할 일 항목에 대한 정보를 보여 주는 컴포넌트\r\n\r\nimport React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport { ListItem, TodoListItemVirtualized } from './style/Style';\r\n\r\nconst TodoListItem = ({ todo, onDelete, onToggle, style }) => {\r\n  const { id, text, checked, deleted } = todo;\r\n\r\n  return (\r\n    <TodoListItemVirtualized style={style}>\r\n      <ListItem className={cn({ deleted })}>\r\n        <div\r\n          className={cn('checkBox', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {todo.checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n        <div className=\"remove\" onClick={() => onDelete(id)}>\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </ListItem>\r\n    </TodoListItemVirtualized>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","// todos 배열을 props로 받아 온 후, 화면에 출력\r\nimport React, { useCallback } from 'react';\r\nimport { List } from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './style/TodoList.css';\r\n\r\nconst TodoList = ({ todos, onDelete, onToggle }) => {\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = todos[index];\r\n      return (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={key}\r\n          onDelete={onDelete}\r\n          onToggle={onToggle}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [onDelete, onToggle, todos],\r\n  );\r\n  return (\r\n    <List\r\n      className=\"TodoList\"\r\n      autoWidth={true}\r\n      width={630}\r\n      height={650}\r\n      rowCount={todos.length}\r\n      rowHeight={57}\r\n      rowRenderer={rowRenderer}\r\n      list={todos}\r\n      style={{ outline: 'none' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React, { useState, useCallback, useEffect } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  const TODOS = 'toDos';\n\n  useEffect(() => {\n    getToDos();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODOS, JSON.stringify(todos));\n  }, [todos]);\n\n  const getToDos = () => {\n    const loadedToDos = localStorage.getItem(TODOS);\n\n    if (loadedToDos !== null) {\n      const parseToDos = JSON.parse(loadedToDos);\n      setTodos(parseToDos);\n    }\n  };\n\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: window.performance.now(),\n      text,\n      checked: false,\n      delete: false,\n    };\n    setTodos(todos => todos.concat(todo));\n  }, []);\n  /*\n  setTimeout() 일정 시간 뒤에 작업을 수행함\n*/\n  const onDelete = useCallback(id => {\n    setTodos(todos =>\n      todos.map(todo =>\n        todo.id === id ? { ...todo, deleted: !todo.deleted } : todo,\n      ),\n    );\n    setTimeout(\n      () => setTodos(todos => todos.filter(todo => todo.id !== id)),\n      800,\n    );\n  }, []);\n\n  const onToggle = useCallback(id => {\n    setTodos(todos =>\n      todos.map(todo =>\n        todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n      ),\n    );\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onDelete={onDelete} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}