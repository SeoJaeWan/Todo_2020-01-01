{"version":3,"sources":["components/style/Style.js","components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["sizes","desktop","tablet","media","Object","keys","reduce","acc","label","css","Template","styled","div","Insert","form","ListItem","List","TodoTemplate","children","className","TodoInsert","onInsert","inputEl","useRef","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","current","focus","placeholder","ref","type","React","memo","todo","onDelete","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","key","createBulktodos","array","i","push","App","setTodos","length","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab7ef26e.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nconst sizes = {\r\n  desktop: 1024,\r\n  tablet: 768,\r\n};\r\n\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n  acc[label] = (...args) => css`\r\n    @media (max-width: ${sizes[label] / 16}em) {\r\n      ${css(...args)};\r\n    }\r\n  `;\r\n\r\n  return acc;\r\n}, {});\r\n\r\nexport const Template = styled.div`\r\n  /* width가 주어진 상태에서 좌우 정렬 */\r\n  width: 630px;\r\n  margin: 0 auto;\r\n  margin-top: 6rem;\r\n  ${media.desktop`width: 768px;`}\r\n  ${media.tablet`width: 100%; margin-top: 0rem;`}\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n\r\n  .app-title {\r\n    background: #396c67;\r\n    color: white;\r\n    height: 4rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .contents {\r\n    background: white;\r\n  }\r\n`;\r\n\r\nexport const Insert = styled.form`\r\n  display: flex;\r\n  background: #495057;\r\n  input {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    padding: 0.5rem;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n    color: white;\r\n\r\n    &::placeholder {\r\n      color: #dee2e6;\r\n    }\r\n\r\n    flex: 1;\r\n  }\r\n\r\n  button {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    background: #868e96;\r\n    color: white;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    transition: 0.1s ease-in;\r\n\r\n    &:hover {\r\n      background: #adb5bd;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &:nth-child(even) {\r\n    background: #f8f9fa;\r\n  }\r\n\r\n  .checkBox {\r\n    cursor: pointer;\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n    svg {\r\n      /* 아이콘 */\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    .text {\r\n      margin-left: 0.5rem;\r\n      flex: 1;\r\n    }\r\n\r\n    /* 체크되었을 때 보여 줄 스타일 ( 조건부 스타일링 )*/\r\n    &.checked {\r\n      svg {\r\n        color: #22b8cf;\r\n      }\r\n\r\n      .text {\r\n        color: #adb5bd;\r\n        text-decoration: line-through;\r\n      }\r\n    }\r\n  }\r\n\r\n  .remove {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.5rem;\r\n    color: #ff6b6b;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      color: #ff8787;\r\n    }\r\n  }\r\n\r\n  & + & {\r\n    border-top: 1px solid #dee2ed;\r\n  }\r\n`;\r\n\r\nexport const List = styled.div`\r\n  min-height: 320px;\r\n  max-height: 513px;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: #2f3542;\r\n  }\r\n  ::-webkit-scrollbar-track {\r\n    background-color: white;\r\n  }\r\n`;\r\n","// 화면을 가운데 정렬 및 앱 타일틀을 보여준다\r\n\r\nimport React from 'react';\r\nimport { Template } from './style/Style';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <Template>\r\n      <div className=\"app-title\">일정 관리</div>\r\n      <div className=\"contents\">{children}</div>\r\n    </Template>\r\n  );\r\n};\r\nexport default TodoTemplate;\r\n","// 새로운 항목을 입력하고 추가\r\nimport React, { useState, useCallback, useRef } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { Insert } from './style/Style';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const inputEl = useRef(null);\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback(e => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  /*\r\n  onSubmit 대신 onClick을 버튼에 줘도 정상적으로 작동하지만\r\n  Submit은 Input에서 Enter 키를 눌렀을 때도 반응을 한다.\r\n\r\n  하지만 onSubmit은 사용한 뒤 새로고침이 발생하기 때문에 이를 조치하기 위해서\r\n  e.preventDefault() 함수를 사용한다. \r\n*/\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      onInsert(value);\r\n      setValue('');\r\n\r\n      e.preventDefault();\r\n      inputEl.current.focus();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <Insert onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요\"\r\n        value={value}\r\n        onChange={onChange}\r\n        ref={inputEl}\r\n      />\r\n\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </Insert>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","// 각 할 일 항목에 대한 정보를 보여 주는 컴포넌트\r\n\r\nimport React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport { ListItem } from './style/Style';\r\n\r\nconst TodoListItem = ({ todo, onDelete, onToggle }) => {\r\n  const { id, text, checked } = todo;\r\n\r\n  return (\r\n    <ListItem>\r\n      <div className={cn('checkBox', { checked })} onClick={() => onToggle(id)}>\r\n        {todo.checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n\r\n        <div className=\"text\">{text}</div>\r\n      </div>\r\n      <div className=\"remove\" onClick={() => onDelete(id)}>\r\n        <MdRemoveCircleOutline />\r\n      </div>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\n/*\r\n  많은 양의 데이터가 추가되었을 때 바뀐 항목외 다른 항목은 리렌더링되지 않게 하기위해서 React.memo 함수를 사용하였다.\r\n  이는 컴포넌트의 props가 바뀌지 않았다면, 리렌더링 되지 않도록 설정하여 함수형 컴포넌트의 리렌더링 성능을 최적화해 줄 수 있다.\r\n  이제 TodoListItem 컴포넌트는 todo, onDelete, onToggle이 바뀌지 않으면 리렌더링을 하지 않는다.\r\n*/\r\nexport default React.memo(TodoListItem);\r\n","// todos 배열을 props로 받아 온 후, 화면에 출력\r\nimport React from 'react';\r\nimport { List } from './style/Style';\r\nimport TodoListItem from './TodoListItem';\r\n\r\nconst TodoList = ({ todos, onDelete, onToggle }) => {\r\n  return (\r\n    <List>\r\n      {todos.map(todo => (\r\n        <TodoListItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          onDelete={onDelete}\r\n          onToggle={onToggle}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useCallback, useRef } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulktodos() {\n  const array = [];\n  for (let i = 1; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: `할일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n/*\n  useState() 안에 함수 createBulktodos()를 넣을때\n  useState(createBulktodos()); 이렇게 입력하면 리렌더링될 때마다 createBulktodos 함수가 호출되지만,\n  useState(createBulktodos); 이렇게 입력하면 컴포넌트가 처음 렌더링될 때만 함수가 실행된다.\n*/\nconst App = () => {\n  const [todos, setTodos] = useState(createBulktodos);\n\n  const onInsert = useCallback(\n    text => {\n      const todo = {\n        id: todos.length,\n        text,\n        checked: false,\n      };\n\n      setTodos(todos => todos.concat(todo));\n    },\n    [todos],\n  );\n\n  const onDelete = useCallback(\n    id => {\n      setTodos(todos => todos.filter(todo => todo.id !== id));\n    },\n    [todos],\n  );\n\n  const onToggle = useCallback(\n    id => {\n      setTodos(todos =>\n        todos.map(todo =>\n          todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n        ),\n      );\n    },\n    [todos],\n  );\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onDelete={onDelete} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}