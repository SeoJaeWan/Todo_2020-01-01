{"version":3,"sources":["components/todo/style/Style.js","components/todo/TodoTemplate.js","components/todo/TodoInsert.js","components/todo/TodoListItem.js","components/todo/TodoList.js","components/todo/Todo.js","modules/todos.js","containers/TodosContainer.js","App.js","modules/index.js","loggerMiddleware.js","index.js"],"names":["sizes","desktop","tablet","media","Object","keys","reduce","acc","label","css","Template","styled","div","Insert","form","ListItem","TodoListItemVirtualized","TodoTemplate","children","changeHeight","className","TodoInsert","onInsert","inputEl","useRef","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","current","focus","placeholder","ref","maxLength","type","React","memo","todo","onEdit","onRemove","onToggle","style","id","text","checked","remove","edit","setEdit","console","log","cn","onClick","autoFocus","todos","rowRenderer","index","key","autoWidth","width","height","rowCount","length","rowHeight","list","outline","Todo","insert","createAction","window","performance","now","toggle","change","loadedToDos","localStorage","getItem","initialState","JSON","parse","handleActions","state","payload","concat","map","filter","info","connect","removeAsync","dispatch","setTimeout","useEffect","setItem","stringify","App","rootReducer","combineReducers","loggerMiddleware","store","next","action","group","getState","groupEnd","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.604e3f56.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nconst sizes = {\r\n  desktop: 1024,\r\n  tablet: 630,\r\n};\r\n\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n  acc[label] = (...args) => css`\r\n    @media (max-width: ${sizes[label] / 16}em) {\r\n      ${css(...args)};\r\n    }\r\n  `;\r\n\r\n  return acc;\r\n}, {});\r\n\r\nexport const Template = styled.div`\r\n  /* width가 주어진 상태에서 좌우 정렬 */\r\n  width: 630px;\r\n  margin: 0 auto;\r\n  margin-top: 5rem;\r\n  ${media.tablet`width: 100%; margin-top: 0rem;`}\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n\r\n  .app-title {\r\n    background: #396c67;\r\n    color: white;\r\n    height: 4rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .contents {\r\n    background: white;\r\n  }\r\n`;\r\n\r\nexport const Insert = styled.form`\r\n  display: flex;\r\n  background: #495057;\r\n  input {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    padding: 0.5rem;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n    color: white;\r\n\r\n    &::placeholder {\r\n      color: #dee2e6;\r\n    }\r\n\r\n    flex: 1;\r\n  }\r\n\r\n  button {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    background: #868e96;\r\n    color: white;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    transition: 0.1s ease-in;\r\n\r\n    &:hover {\r\n      background: #adb5bd;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  input {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .edit {\r\n    cursor: pointer;\r\n    margin-right: 20px;\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .checkBox {\r\n    cursor: pointer;\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n    svg {\r\n      /* 아이콘 */\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    .text {\r\n      margin-left: 0.5rem;\r\n      flex: 1;\r\n    }\r\n\r\n    /* 체크되었을 때 보여 줄 스타일 ( 조건부 스타일링 )*/\r\n    &.checked {\r\n      svg {\r\n        color: #22b8cf;\r\n      }\r\n\r\n      .text {\r\n        color: #adb5bd;\r\n        text-decoration: line-through;\r\n      }\r\n    }\r\n  }\r\n\r\n  .remove {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.5rem;\r\n    color: #ff6b6b;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      color: #ff8787;\r\n    }\r\n  }\r\n  transform: translateX(0);\r\n  transition: 0.5s ease-in;\r\n  &.remove {\r\n    transform: translateX(650px);\r\n  }\r\n`;\r\n\r\nexport const TodoListItemVirtualized = styled.div`\r\n  & + & {\r\n    border-top: 1px solid #dee2e6;\r\n  }\r\n\r\n  &:nth-child(even) {\r\n    background: #f8f9fa;\r\n  }\r\n`;\r\n","// 화면을 가운데 정렬 및 앱 타일틀을 보여준다\r\n\r\nimport React from 'react';\r\nimport { Template } from './style/Style';\r\n\r\nconst TodoTemplate = ({ children, changeHeight }) => {\r\n  return (\r\n    <Template changeHeight={changeHeight}>\r\n      <div className=\"app-title\">Todo List</div>\r\n      <div className=\"contents\">{children}</div>\r\n    </Template>\r\n  );\r\n};\r\nexport default TodoTemplate;\r\n","// 새로운 항목을 입력하고 추가\r\nimport React, { useState, useCallback, useRef } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { Insert } from './style/Style';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const inputEl = useRef(null);\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback(e => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      onInsert(value);\r\n      setValue('');\r\n      e.preventDefault();\r\n      inputEl.current.focus();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <Insert onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요\"\r\n        value={value}\r\n        onChange={onChange}\r\n        ref={inputEl}\r\n        maxLength={31}\r\n      />\r\n\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </Insert>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","// 각 할 일 항목에 대한 정보를 보여 주는 컴포넌트\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n  MdCreate,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport { ListItem, TodoListItemVirtualized } from './style/Style';\r\n\r\nconst TodoListItem = ({ todo, onEdit, onRemove, onToggle, style }) => {\r\n  const { id, text, checked, remove } = todo;\r\n  const [value, setValue] = useState('');\r\n  const [edit, setEdit] = useState(false);\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const onUpdate = () => {\r\n    if (edit) {\r\n      onEdit(id, value);\r\n    } else {\r\n      setValue(text);\r\n    }\r\n    setEdit(!edit);\r\n  };\r\n\r\n  return (\r\n    <TodoListItemVirtualized style={style}>\r\n      {console.log(remove)}\r\n      <ListItem className={cn({ remove })}>\r\n        {console.log(id)}\r\n        <div\r\n          className={cn('checkBox', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {todo.checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          {edit ? (\r\n            <input\r\n              className=\"text\"\r\n              value={value}\r\n              onChange={onChange}\r\n              autoFocus\r\n            />\r\n          ) : (\r\n            <div className=\"text\">{text}</div>\r\n          )}\r\n        </div>\r\n        <div className=\"edit\" onClick={() => onUpdate()}>\r\n          <MdCreate />\r\n        </div>\r\n        <div\r\n          className=\"remove\"\r\n          onClick={() => {\r\n            onRemove(id);\r\n            console.log(id);\r\n          }}\r\n        >\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </ListItem>\r\n    </TodoListItemVirtualized>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","// todos 배열을 props로 받아 온 후, 화면에 출력\r\nimport React, { useCallback } from 'react';\r\nimport { List } from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './style/TodoList.css';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle, onEdit }) => {\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = todos[index];\r\n      return (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={key}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          onEdit={onEdit}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [onRemove, onToggle, onEdit, todos],\r\n  );\r\n  return (\r\n    <List\r\n      className=\"TodoList\"\r\n      autoWidth={true}\r\n      width={630}\r\n      height={650}\r\n      rowCount={todos.length}\r\n      rowHeight={57}\r\n      rowRenderer={rowRenderer}\r\n      list={todos}\r\n      style={{ outline: 'none' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React from 'react';\r\nimport TodoTemplate from './TodoTemplate';\r\nimport TodoInsert from './TodoInsert';\r\nimport TodoList from './TodoList';\r\n\r\nconst Todo = ({ todos, onInsert, onRemove, onToggle, onEdit }) => {\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList\r\n        todos={todos}\r\n        onRemove={onRemove}\r\n        onToggle={onToggle}\r\n        onEdit={onEdit}\r\n      />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst INSERT = 'todos/INSERT';\r\nconst REMOVE = 'todos/REMOVE';\r\nconst TOGGLE = 'todos/TOGGLE';\r\nconst EDIT = 'todos/EDIT';\r\nconst CHANGE = 'todos/CHANGE';\r\nconst TODOS = 'toDos';\r\n\r\nexport const insert = createAction(INSERT, text => ({\r\n  id: window.performance.now(),\r\n  text,\r\n  checked: false,\r\n  remove: false,\r\n}));\r\nexport const toggle = createAction(TOGGLE, id => id);\r\nexport const remove = createAction(REMOVE, id => id);\r\nexport const edit = createAction(EDIT, (id, text) => ({\r\n  id,\r\n  text,\r\n}));\r\nexport const change = createAction(CHANGE, id => id);\r\n\r\nexport const removeAsync = id => dispatch => {\r\n  dispatch(change(id));\r\n  setTimeout(() => {\r\n    dispatch(remove(id));\r\n  }, 1000);\r\n};\r\nconst loadedToDos = localStorage.getItem(TODOS);\r\n\r\nconst initialState = {\r\n  todos: loadedToDos === null ? [] : JSON.parse(loadedToDos),\r\n};\r\n\r\nconst todos = handleActions(\r\n  {\r\n    [INSERT]: (state, { payload: todo }) => ({\r\n      todos: state.todos.concat(todo),\r\n    }),\r\n    [TOGGLE]: (state, { payload: id }) => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === id ? { ...todo, checked: !todo.checked } : todo,\r\n      ),\r\n    }),\r\n    [REMOVE]: (state, { payload: id }) => ({\r\n      todos: state.todos.filter(todo => todo.id !== id),\r\n    }),\r\n    [EDIT]: (state, { payload: info }) => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === info.id ? { ...todo, text: info.text } : todo,\r\n      ),\r\n    }),\r\n    [CHANGE]: (state, { payload: id }) => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === id ? { ...todo, remove: !todo.remove } : todo,\r\n      ),\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default todos;\r\n","import React, { useEffect } from 'react';\r\nimport Todo from '../components/todo/Todo';\r\nimport { insert, toggle, removeAsync, edit } from '../modules/todos';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TodosContainer = ({ todos, insert, toggle, removeAsync, edit }) => {\r\n  const TODOS = 'toDos';\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(TODOS, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <Todo\r\n      todos={todos}\r\n      onInsert={insert}\r\n      onToggle={toggle}\r\n      onRemove={removeAsync}\r\n      onEdit={edit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  state => ({\r\n    todos: state.todos.todos,\r\n  }),\r\n  {\r\n    insert,\r\n    toggle,\r\n    removeAsync,\r\n    edit,\r\n  },\r\n)(TodosContainer);\r\n","import React from 'react';\nimport TodosContainer from './containers/TodosContainer';\n\nconst App = () => {\n  return <TodosContainer />;\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n  todos,\r\n});\r\n\r\nexport default rootReducer;\r\n","/*\r\n    리덕스 미들웨어는 액션을 디스패치했을 때 리듀서에서 이를 처리하기에 앞서 사전에 지정된 작업을 실행한다.\r\n    즉, 액션과 리듀서 사이의 중간자라고 볼 수 있다.\r\n\r\n    리듀서가 액션을 처리하기 전에 미들웨어가 할 수  있는 작업은 여러 가지 있다.\r\n    전달받은 액션을 콘솔에 기록하거나, 전달받은 액션의 정보를 기반으로 액션을 취소하거나, 다른 종류의 액션을 추가로 디스패치할 수 있다.\r\n\r\n    미들웨어는 여러 종류의 작업을 처리할 수 있다.\r\n    특정 조건에 액션을 무시하게 할 수 있고, 액션 정보를 가로채서 변경한 후 리듀서에 전달 할 수 있다.\r\n    이외에도 다양한 작업이 가능하다.\r\n*/\r\nconst loggerMiddleware = store => next => action => {\r\n  console.group(action && action.type); // 액션타입으로 log를 그룹화함\r\n  console.log(\"이전 상태\", store.getState());\r\n  console.log(\"액션\", action);\r\n  next(action); // 다음 미들웨어 혹은 리듀서에게 전달\r\n  console.log(\"다음 상태\", store.getState()); // 업데이트된 상태\r\n  console.groupEnd(); // 그룹 끝\r\n};\r\n\r\nexport default loggerMiddleware;\r\n/*\r\n    위 코드에서 리덕스 미들웨어의 구조를 볼 수 있는데, 화살표 함수를 연달아 사용했는데, 일반 function 키워드로 풀어서 쓴다면\r\n\r\n    const loggerMiddleware = function loggerMiddleware(store) {\r\n        return function(next) {\r\n            return function(action) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    미들웨어는 결국 함수를 반환하는 함수를 반환하는 함수이다. 여기서 받아오는 파라미터 중 store는 리덕스 스토어 인스턴스, action은 디스패치된 액션을 가리킨다.\r\n    next 파라미터는 함수 형태이며, store.dispatch와 비슷한 역할을 한다.\r\n\r\n    하지만 큰 차이점이 있는데, next(action)을 호출하면 처리해야 할 미들웨어에게 액션을 넘겨주고, 다음 미들웨어가 없다면 리듀서에게 액션을 넘겨준다.\r\n\r\n    미들웨어 내부에서 store.dispatch를 사용하면 첫 번째 미들웨어부터 다시 처리된다.\r\n    만약 미들웨어에서 next를 사용하지 않으면 액션이 리듀서에 전달되지 않는다. 즉 액션이 무시된다.\r\n*/\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport ReduxThunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './modules';\nimport loggerMiddleware from './loggerMiddleware';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(loggerMiddleware, ReduxThunk),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}